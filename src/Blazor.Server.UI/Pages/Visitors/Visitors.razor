@page "/pages/Visitors"

@using BlazorDownloadFile
@using CleanArchitecture.Blazor.Application.Features.Visitors.Caching
@using CleanArchitecture.Blazor.Application.Features.Visitors.DTOs
@using CleanArchitecture.Blazor.Application.Features.Visitors.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.Visitors.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.Visitors.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.Visitors.Commands.AddEdit

@inject IJSRuntime JS
@inject IStringLocalizer<Visitors> L
@attribute [Authorize(Policy = Permissions.Visitors.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>

<ErrorBoundary>
    <ChildContent>
        <MudDataGrid ServerData="@(ServerReload)"
                     FixedHeader="true"
                     FixedFooter="true"
                     Virtualize="true"
                     @bind-RowsPerPage="_defaultPageSize"
                     Height="calc(100vh - 330px)"
                     Loading="@_loading"
                     MultiSelection="true"
                     @bind-SelectedItems="_selectedItems"
                     @bind-SelectedItem="_currentDto"
                     Hover="true" @ref="_table">
            <ToolBarContent>
                <div class="d-flex align-start flex-grow-1">
                    <div class="d-flex gap-4">
                        <MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.caption">@Title</MudText>
                            <MudEnumSelect Style="min-width:120px" TEnum="VisitorListView" ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="List View">
                            </MudEnumSelect>
                        </div>
                    </div>
                    <div class="flex-grow-1" />

                    <div class="d-flex flex-column justify-end">
                        <div class="d-flex">
                            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                <MudButton DisableElevation Variant="Variant.Outlined"
                                           Size="Size.Small"
                                           Disabled="@_loading"
                                           OnClick="@(()=>OnRefresh())"
                                           StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                           Style="margin-right: 4px; margin-bottom:4px">@ConstantString.Refresh</MudButton>
                                @if (_canCreate)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Add"
                                           Size="Size.Small"
                                           Disabled="@_loading"
                                           OnClick="OnCreate"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           IconColor="Color.Surface">@ConstantString.New</MudButton>
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.ContentCopy"
                                           Size="Size.Small"
                                           Disabled="@(_selectedItems.Count!=1)"
                                           OnClick="OnClone"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           IconColor="Color.Surface">@ConstantString.Clone</MudButton>
                                }
                                @if (_canDelete)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.Delete"
                                           Disabled="@(!(_selectedItems.Count>0))"
                                           Size="Size.Small"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           OnClick="OnDeleteChecked"
                                           IconColor="Color.Surface">@ConstantString.Delete</MudButton>
                                }
                                @if (_canExport)
                                {
                                    <MudLoadingButton @bind-Loading="_exporting" DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                                  Label="@ConstantString.Export"
                                                  Disabled="@_loading"
                                                  StartIcon="@Icons.Custom.FileFormats.FileExcel"
                                                  Size="Size.Small"
                                                  Style="margin-right: 4px; margin-bottom:4px"
                                                  OnClick="OnExport"
                                                  IconColor="Color.Surface">
                                    @ConstantString.Export
                                    </MudLoadingButton>
                                }

                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                                @if (_canCreate)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Add"
                                           Size="Size.Small"
                                           Disabled="@_loading"
                                           OnClick="OnCreate"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           IconColor="Color.Surface">@ConstantString.New</MudButton>
                                }
                                @if (_canDelete)
                                {
                                    <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.Delete"
                                           Disabled="@(!(_selectedItems.Count>0))"
                                           Size="Size.Small"
                                           Style="margin-right: 4px; margin-bottom:4px"
                                           OnClick="OnDeleteChecked"
                                           IconColor="Color.Surface">@ConstantString.Delete</MudButton>
                                }
                            </MudHidden>
                        </div>
                        @if (_canSearch)
                        {
                            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@Query.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"></MudTextField>
                        }

                    </div>
                </div>
            </ToolBarContent>
            <Columns>
                <HierarchyColumn ButtonDisabledFunc="@(x => !x.VisitHistories?.Any()??true)" />
                <SelectColumn ShowInFooter="false"></SelectColumn>
                <TemplateColumn CellStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
                    <CellTemplate>
                        @if (_canEdit || _canDelete)
                        {
                            <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                                 Dense="true"
                                 EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                                @if (_canEdit)
                                {
                                    <MudMenuItem OnClick="@(()=>OnEdit(context.Item))">@ConstantString.Edit</MudMenuItem>
                                }
                                @if (_canDelete)
                                {
                                    <MudMenuItem OnClick="@(()=>OnDelete(context.Item))">@ConstantString.Delete</MudMenuItem>
                                }
                            </MudMenu>
                        }
                        else
                        {
                            <MudIconButton Variant="Variant.Filled" DisableElevation="true"
                                       Disabled="true"
                                       Icon="@Icons.Material.Filled.DoNotTouch"
                                       Size="Size.Small"
                                       Color="Color.Surface">
                                @ConstantString.NoAllowed
                            </MudIconButton>
                        }
                    </CellTemplate>
                </TemplateColumn>
                @*TODO: Define the fields that should be displayed in data table*@
                <PropertyColumn Property="x => x.Name" Title="@L[_currentDto.GetMemberDescription(x=>x.Name)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body2">@context.Item.Name</MudText>
                            <MudText Typo="Typo.body2">@context.Item.Documentation</MudText>
                        </div>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.Interviewee" Title="@L[_currentDto.GetMemberDescription(x=>x.Interviewee)]" />
                <PropertyColumn Property="x => x.PurposeOfVisit" Title="@L[_currentDto.GetMemberDescription(x=>x.PurposeOfVisit)]" />
                <PropertyColumn Property="x => x.DateOfVisit" Title="@L[_currentDto.GetMemberDescription(x=>x.DateOfVisit)]" />
                <PropertyColumn Property="x => x.Status" Title="@L[_currentDto.GetMemberDescription(x=>x.Status)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body2">@context.Item.Status</MudText>
                            <MudText Typo="Typo.body2">@context.Item.Description</MudText>
                        </div>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.Photos" Sortable="false" Title="@L[_currentDto.GetMemberDescription(x=>x.Photos)]">
                    <CellTemplate>
                        <div class="d-flex flex-column">
                            @if (context.Item.Photos is not null)
                            {
                                <MudAvatarGroup Spacing="5" MaxColor="Color.Primary">
                                    @foreach (var item in context.Item.Photos)
                                    {
                                        <MudAvatar>
                                            <MudImage Src="@item.Url"></MudImage>
                                        </MudAvatar>
                                    }
                                </MudAvatarGroup>
                            }
                        </div>
                    </CellTemplate>
                </PropertyColumn>
            </Columns>
            <ChildRowContent>
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@($"{context.Item.Name}'s visit history")</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudSimpleTable Style="overflow-x: auto;">
                                <thead>
                                    <tr>
                                        <th>@L["Checked Date"]</th>
                                        <th>@L["Signature"]</th>
                                        <th>@L["Tracking"]</th>
                                        <th>@L["Take Photo"]</th>
                                    </tr>
                            </thead>
                            <tbody>
                                @foreach (var row in context.Item.VisitHistories)
                                { 
                                    <tr>
                                       <td>@row.CheckDateTime</td>
                                       <td>@row.Signature</td>
                                        <td>@row.Tracking</td>
                                        <td>
                                            <MudAvatar>
                                                <MudImage Src="@row.TakePhoto"></MudImage>
                                            </MudAvatar>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudCardContent>
                </MudCard>
            </ChildRowContent>
            <NoRecordsContent>
                <MudText>@ConstantString.NoRecords</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@ConstantString.Loading</MudText>
            </LoadingContent>
            <PagerContent>
                <MudDataGridPager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
        </MudDataGrid>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>


@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<VisitorDto> _selectedItems = new HashSet<VisitorDto>();
    private MudDataGrid<VisitorDto> _table = default!;
    private VisitorDto _currentDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _downloading;
    private bool _exporting;
    [Inject]
    private IMediator Mediator { get; set; } = default!;
    [Inject]
    private IMapper Mapper { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private VisitorsWithPaginationQuery Query { get; set; } = new();
    [Inject]
    private IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Visitors.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Visitors.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Visitors.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Visitors.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Visitors.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Visitors.Export)).Succeeded;
    }
    private async Task<GridData<VisitorDto>> ServerReload(GridState<VisitorDto> state)
    {
        try
        {
            _loading = true;
            Query.Sort = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortBy = (state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? AutoFilterer.Enums.Sorting.Descending : AutoFilterer.Enums.Sorting.Ascending);
            Query.Page = state.Page + 1;
            Query.PerPage = state.PageSize;
            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<VisitorDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        Query.Keyword = text;
        await _table.ReloadServerData();
    }
    private async Task OnChangedListView(VisitorListView listview)
    {
        Query.ListView = listview;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        VisitorCacheKey.Refresh();
        _selectedItems = new();
        Query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }

    private async Task OnCreate()
    {
        var command = new AddEditVisitorCommand();
        var parameters = new DialogParameters
            {
                { nameof(_VisitorFormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_VisitorFormDialog>
        (L["Create a new item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }
    private async Task OnClone()
    {
        var copyitem = _selectedItems.First();
        var command = new AddEditVisitorCommand()
            {
                Name = copyitem.Name,
                Description = copyitem.Description,
                Photos = copyitem.Photos,
                DateOfVisit = copyitem.DateOfVisit,
                PurposeOfVisit = copyitem.PurposeOfVisit,
                Interviewee = copyitem.Interviewee,
                Documentation = copyitem.Documentation,
                Status = VisitStatus.New,

            };
        var parameters = new DialogParameters
            {
                { nameof(_VisitorFormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_VisitorFormDialog>
        (L["Create a new item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
            _selectedItems.Remove(copyitem);
        }
    }
    private async Task OnEdit(VisitorDto dto)
    {
        var command = Mapper.Map<AddEditVisitorCommand>(dto);
        var parameters = new DialogParameters
            {
                { nameof(_VisitorFormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_VisitorFormDialog>
        (L["Edit the item"], parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OnDelete(VisitorDto dto)
    {
        var command = new DeleteVisitorCommand(new int[] { dto.Id });
        var parameters = new DialogParameters
           {
             { nameof(DeleteConfirmation.Command),  command },
             { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DeleteConfirmation, dto.Name) }
           };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
            _selectedItems.Remove(dto);
        }
    }

    private async Task OnDeleteChecked()
    {
        var command = new DeleteVisitorCommand(_selectedItems.Select(x => x.Id).ToArray());
        var parameters = new DialogParameters
                        {
                             { nameof(DeleteConfirmation.Command),  command },
                             { nameof(DeleteConfirmation.ContentText), string.Format(ConstantString.DeleteConfirmWithSelected,_selectedItems.Count) }
                        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(ConstantString.DeleteConfirmationTitle, parameters, options);
        var state = await dialog.Result;
        if (!state.Canceled)
        {
            await _table.ReloadServerData();
            _selectedItems = new();
        }
    }

    private async Task OnExport()
    {
        _exporting = true;
        var request = new ExportVisitorsQuery()
            {
                Keyword = Query.Keyword,
                ListView = Query.ListView,
                Sort = _table.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
                SortBy = (_table.SortDefinitions.Values.FirstOrDefault()?.Descending ?? false) ? AutoFilterer.Enums.Sorting.Ascending : AutoFilterer.Enums.Sorting.Descending
            };
        var result = await Mediator.Send(request);
        if (result.Succeeded)
        {
            var downloadresult = await BlazorDownloadFileService.DownloadFile($"{L["Visitors"]}.xlsx", result.Data, contentType: "application/octet-stream");
            Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
        }
        else
        {
            Snackbar.Add($"{result.ErrorMessage}", MudBlazor.Severity.Error);
        }
        _exporting = false;
    }

    private async Task PreviewImage(string url)
    {
        await JS.InvokeVoidAsync("previewImage", url, new string[] { url });
    }
}